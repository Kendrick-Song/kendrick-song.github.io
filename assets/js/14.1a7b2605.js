(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{299:function(t,s,a){"use strict";a.r(s);var e=a(14),v=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"vuepress-部署"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vuepress-部署"}},[t._v("#")]),t._v(" VuePress 部署")]),t._v(" "),s("h2",{attrs:{id:"部署到-github-pages"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#部署到-github-pages"}},[t._v("#")]),t._v(" 部署到 Github Pages")]),t._v(" "),s("h3",{attrs:{id:"创建远程仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建远程仓库"}},[t._v("#")]),t._v(" 创建远程仓库")]),t._v(" "),s("p",[t._v("在 "),s("a",{attrs:{href:"https://github.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub"),s("OutboundLink")],1),t._v(" 中新建一个仓库，仓库名称这里输入 "),s("code",[t._v("username.github.io")]),t._v(" 作为存储库名称。 将 "),s("code",[t._v("username")]),t._v(" 替换为你的 GitHub 用户名。 例如，如果用户名为 "),s("code",[t._v("octocat")]),t._v("，则存储库名称应为 "),s("code",[t._v("octocat.github.io")]),t._v("。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("如果你打算将博客发布到 "),s("code",[t._v("https://<USERNAME>.github.io/")]),t._v("，那么就按照上述步骤进行配置；")]),t._v(" "),s("p",[t._v("如果你打算将博客发布到 "),s("code",[t._v("https://<USERNAME>.github.io/<REPO>/")]),t._v("（也就是说你的仓库在 "),s("code",[t._v("https://github.com/<USERNAME>/<REPO>")]),t._v("），则将仓库名称改为 "),s("code",[t._v("<REPO>")]),t._v("，并在 "),s("code",[t._v("config.js")]),t._v(" 中将 "),s("code",[t._v("base")]),t._v(" 设置为 "),s("code",[t._v('"/<REPO>/"')]),t._v("。")])]),t._v(" "),s("p",[t._v("这个仓库就是我们博客的仓库，其应当有两个分支，在后续 push 时尽量遵从：")]),t._v(" "),s("ul",[s("li",[t._v("main：存储项目所有的文件，除构建文件（比如 "),s("code",[t._v("dist")]),t._v("）；")]),t._v(" "),s("li",[t._v("deploy：博客的部署分支，用于 Github Pages 的展示，存放项目的构建后文件。")])]),t._v(" "),s("h3",{attrs:{id:"创建本地仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建本地仓库"}},[t._v("#")]),t._v(" 创建本地仓库")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("我们在容器内的所有本地操作，都仅限于当前容器。基于相同镜像新建的容器是没有我们后续操作产生的任何文件的。血泪教训："),s("RouterLink",{attrs:{to:"/📚 博客搭建/踩坑记录.html#容器内对挂载文件夹使用-mv-命令导致主机对应文件全部被删除-😭"}},[t._v("容器内对挂载文件夹使用 "),s("code",[t._v("mv")]),t._v(" 命令导致主机对应文件全部被删除 😭")])],1),t._v(" "),s("p",[t._v("如果担心哪一天这个容器被玩坏了，从镜像新建容器还要再来一遍相同的步骤，觉得麻烦，可以在操作完以下步骤后用 "),s("code",[t._v("docker commit")]),t._v(" 命令将这个容器的本地操作提交为一个镜像，这就相当于给容器拍了个快照，以后可以从这个新镜像新建容器。")])]),t._v(" "),s("h4",{attrs:{id:"配置-git"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置-git"}},[t._v("#")]),t._v(" 配置 Git")]),t._v(" "),s("p",[t._v("用 "),s("code",[t._v("docker exec")]),t._v(" 命令进入容器的 bash，根据 "),s("a",{attrs:{href:"https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%88%9D%E6%AC%A1%E8%BF%90%E8%A1%8C-Git-%E5%89%8D%E7%9A%84%E9%85%8D%E7%BD%AE",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git - 初次运行 Git 前的配置 (git-scm.com)"),s("OutboundLink")],1),t._v(" 中"),s("strong",[t._v("用户信息")]),t._v("一节设置你的用户名和邮件地址。")]),t._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[t._v("重要")]),t._v(" "),s("p",[t._v("设置你的用户名和邮件地址这一点很重要，因为每一个 Git 提交都会使用这些信息，它们会写入到你的每一次提交中，不可更改。")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--global")]),t._v(" user.name "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"John Doe"')]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--global")]),t._v(" user.email johndoe@example.com\n")])])]),s("p",[t._v("设置完成后可以通过 "),s("code",[t._v("git config --list")]),t._v(" 确认设置正确。")]),t._v(" "),s("h4",{attrs:{id:"通过-ssh-连接到-github"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通过-ssh-连接到-github"}},[t._v("#")]),t._v(" 通过 SSH 连接到 GitHub")]),t._v(" "),s("p",[t._v("没有人希望自己的仓库可以被其他人随意修改，当我们 push 到远程仓库时，Github 会通过 SSH（安全外壳协议）检查我们当前是否有权限对仓库进行修改。")]),t._v(" "),s("p",[t._v("所以对于一个新机器，我们需要生成它的 SSH 密钥对，并将公钥添加到 GitHub 账户中以启用这台机器对 Github 帐户的 SSH 访问。")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("输入 "),s("code",[t._v("ls -al ~/.ssh")]),t._v(" 以查看是否存在现有的 SSH 密钥对。默认情况下，GitHub 的一个支持的公钥的文件名是以下之一：")]),t._v(" "),s("ul",[s("li",[t._v("id_rsa.pub")]),t._v(" "),s("li",[t._v("id_ecdsa.pub")]),t._v(" "),s("li",[t._v("id_ed25519.pub")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("如果收到错误，指示 "),s("code",[t._v("~/.ssh")]),t._v(" 不存在，则表明默认位置中没有现有的 SSH 密钥对。 您可以在下一步中创建新的 SSH 密钥对。")])])]),t._v(" "),s("li",[s("p",[t._v("若没有密钥对，使用下列命令生成密钥对（替换为您的 GitHub 电子邮件地址），这将以提供的电子邮件地址为标签创建新 SSH 密钥：")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ ssh-keygen "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-t")]),t._v(" ed25519 "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-C")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"your_email@example.com"')]),t._v("\n")])])]),s("p",[t._v("执行后一路回车即可。")])]),t._v(" "),s("li",[s("p",[t._v("查看 SSH 公钥，并复制下来：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" ~/.ssh/id_ed25519.pub\n")])])])]),t._v(" "),s("li",[s("p",[t._v("在 Github 中单击右上角个人资料照片 → Settings → 边栏中选择「SSH 和 GPG 密钥」→ 「New SSH key」进入到添加 SSH key 的页面。粘贴公钥并设置对应 Title，比如 「个人笔记本电脑」。")])])]),t._v(" "),s("p",[t._v("至此我们 SSH 相关配置就完成了。")]),t._v(" "),s("h4",{attrs:{id:"创建本地仓库-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建本地仓库-2"}},[t._v("#")]),t._v(" 创建本地仓库")]),t._v(" "),s("p",[t._v("在项目根目录下（"),s("code",[t._v("/vuepress")]),t._v("）执行以下命令初始化本地仓库：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n")])])]),s("p",[t._v("新建 "),s("code",[t._v(".gitignore")]),t._v(" 文件，并写入不需要上传的文件：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -e 参数：启用转义符号")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("touch")]),t._v(" .gitignore "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-e")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'node_modules\\ndist\\n.DS_Store'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" .gitignore\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" .gitignore\nnode_modules\ndist\n")])])]),s("p",[t._v("使用 "),s("code",[t._v("git add -A")]),t._v(" 将文件添加到暂存区，"),s("code",[t._v("git commit -m 'first commit'")]),t._v(" 提交修改。")]),t._v(" "),s("p",[t._v("设置远程仓库：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" origin git@github.com:"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("USERNAME"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("/"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("USERNAME/REPO"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(".github.io.git\n")])])]),s("p",[t._v("推送到远程仓库：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-u")]),t._v(" origin master:main\n")])])]),s("blockquote",[s("p",[s("code",[t._v("-u")]),t._v("  参数其实就相当于记录了 push 到远端分支的默认值，这样当下次我们还想要继续 push 的这个远端分支的时候推送命令就可以简写成 "),s("code",[t._v("git push")]),t._v(" 即可")])]),t._v(" "),s("h2",{attrs:{id:"部署"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#部署"}},[t._v("#")]),t._v(" 部署")]),t._v(" "),s("p",[t._v("基础部署请参考 "),s("a",{attrs:{href:"https://vuepress.vuejs.org/zh/guide/deploy.html#github-pages",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),s("OutboundLink")],1),t._v("，这里只介绍使用 Github Actions 的集成部署。")]),t._v(" "),s("p",[t._v("GitHub Actions 是一种持续集成和持续交付 (CI/CD) 平台，可用于自动执行生成、测试和部署管道。 您可以创建工作流程来构建和测试存储库的每个拉取请求，或将合并的拉取请求部署到生产环境。")]),t._v(" "),s("p",[t._v("可配置 GitHub Actions 工作流，使其在存储库中发生事件（例如打开拉取请求或创建问题）时触发 。 工作流包含一个或多个可按顺序或并行运行的作业。 每个作业都将在其自己的虚拟机运行器中或在容器中运行，并具有一个或多个步骤，用于运行定义的脚本或运行动作。动作是一个可重用的扩展，可简化工作流 。")])])}),[],!1,null,null,null);s.default=v.exports}}]);