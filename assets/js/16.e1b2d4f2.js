(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{301:function(v,t,s){"use strict";s.r(t);var _=s(14),e=Object(_.a)({},(function(){var v=this,t=v._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"踩坑记录"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#踩坑记录"}},[v._v("#")]),v._v(" 踩坑记录")]),v._v(" "),t("h2",{attrs:{id:"容器内对挂载文件夹使用-mv-命令导致主机对应文件全部被删除-😭"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#容器内对挂载文件夹使用-mv-命令导致主机对应文件全部被删除-😭"}},[v._v("#")]),v._v(" 容器内对挂载文件夹使用 "),t("code",[v._v("mv")]),v._v(" 命令导致主机对应文件全部被删除 😭")]),v._v(" "),t("div",{staticClass:"custom-block danger"},[t("p",{staticClass:"custom-block-title"},[v._v("时刻牢记")]),v._v(" "),t("p",[v._v("在容器内除被挂载的目录外，其他任何操作（新建/删除/修改）都不会被持久化！")]),v._v(" "),t("p",[v._v("风险操作前一定记得备份！")])]),v._v(" "),t("h3",{attrs:{id:"问题描述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#问题描述"}},[v._v("#")]),v._v(" 问题描述")]),v._v(" "),t("p",[v._v("起因是我在把博客部署到 Github 上的时候，由于仓库名称和本地项目目录名称不同，导致构建好的静态页面会因为路径问题没有办法在 Github Pages 上正常显示。")]),v._v(" "),t("p",[v._v("解决方法很简单，就是每次部署的时候都需要在 "),t("code",[v._v("docs/.vuepress/config.js")]),v._v(" 中设置正确的 "),t("code",[v._v("base")]),v._v("，具体参考 "),t("a",{attrs:{href:"https://vuepress.vuejs.org/zh/guide/deploy.html#github-pages",target:"_blank",rel:"noopener noreferrer"}},[v._v("部署 | VuePress (vuejs.org)"),t("OutboundLink")],1),v._v("。"),t("s",[v._v("部署完成后需要注释掉，否则本地构建会失败。")]),t("strong",[v._v("（后来发现不注释掉也可以正常构建，不知道在哪看的文章深深的误导了我 ，不然我也不会踩到后面这个大坑😭）")])]),v._v(" "),t("p",[v._v("每次想部署到 Github 上都要改一下这个配置，感觉很麻烦，我就想「能不能把项目根目录的名字改的和仓库一样，这样就省的每次改配置了」。于是乎我就在容器内用 "),t("code",[v._v("mv")]),v._v(" 命令将项目根目录名称给改了，结果"),t("strong",[v._v("容器直接停止运行")]),v._v("。")]),v._v(" "),t("p",[v._v("这时候我还觉得一切还 OK，可能就是不能改吧，"),t("code",[v._v("mv")]),v._v(" 操作失败，重启容器就好了。一重启发现容器起不来了，查日志提示项目目录下找不到 "),t("code",[v._v("package.json")]),v._v(" 文件。")]),v._v(" "),t("p",[v._v("那就新开一个容器呗？但是"),t("strong",[v._v("手贱的我不只新开了一个容器，还把原来的容器给删掉了…")]),v._v("，给后面文档找不回来埋下伏笔。")]),v._v(" "),t("p",[v._v("新开的容器可以跑起来，但是定睛一看：哎？我文档呢？怎么是空的？")]),v._v(" "),t("p",[v._v("这个时候我已经预感不妙：不会刚才 "),t("code",[v._v("mv")]),v._v(" 操作已经把项目文件给操作了吧？我赶紧回到我宿主机挂载文档的目录看一眼，果不其然，"),t("strong",[v._v("所有文档全没了…")])]),v._v(" "),t("h3",{attrs:{id:"问题定位"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#问题定位"}},[v._v("#")]),v._v(" 问题定位")]),v._v(" "),t("p",[v._v("我开始逐一实验排查文档消失前的每一步操作，最终定位到了 "),t("code",[v._v("mv")]),v._v(" 命令这一步。")]),v._v(" "),t("p",[v._v("为了方便文档同步，查看部署效果，我在启动容器时将容器内的 "),t("code",[v._v("docs")]),v._v(" 文件夹和宿主机的文档文件夹设置了绑定挂载（bind mounts），使得这两个文件夹的内容是"),t("strong",[v._v("实时同步")]),v._v("的，这样我就可以在宿主机编写文档，还能时刻查看部署效果。")]),v._v(" "),t("p",[v._v("正常使用都没什么问题，但是当我使用 "),t("code",[v._v("mv")]),v._v(" 命令对容器内项目根目录更名时，问题出现了。 "),t("code",[v._v("mv")]),v._v(" 命令对文件夹进行更名实际上大致是以下几个步骤：")]),v._v(" "),t("ol",[t("li",[v._v("创建目标文件夹；")]),v._v(" "),t("li",[v._v("将原文件夹内所有内容复制到目标文件夹；")]),v._v(" "),t("li",[v._v("删除原文件夹及其内容。")])]),v._v(" "),t("p",[t("strong",[v._v("问题就出现在这里！")])]),v._v(" "),t("p",[v._v("虽然 "),t("code",[v._v("mv")]),v._v(" 命令最终失败了，但是提示的是我挂载的目录被占用了，无法被删除，也就意味着除了这个目录本身以外的内容，全都已经被移动到了目标文件夹中（经过实验测试的确是这样的），而原文件夹只剩下了挂载目录这一个空壳。")]),v._v(" "),t("p",[v._v("所以我们现在来捋一下这个问题发生的过程：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("用 "),t("code",[v._v("mv")]),v._v(" 命令对项目文件夹更名，项目文件夹内有挂载到主机的目录，导致 "),t("code",[v._v("mv")]),v._v(" 命令报错：无法删除，但除目录外的文件均已移动到新文件夹；")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("因为宿主机和容器的挂载目录是同步的，所以宿主机对应的内容也被删除了。")])])]),v._v(" "),t("li",[t("p",[v._v("因为项目文件被移走了，导致 VuePress 进程异常退出，容器关闭；")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("因为容器内的文件操作是不会被持久化的，所以容器删除后那些文档就消失了。")])])])]),v._v(" "),t("h3",{attrs:{id:"解决方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决方案"}},[v._v("#")]),v._v(" 解决方案")]),v._v(" "),t("p",[v._v("不幸的是这些文档是肯定找不回来了，不幸中的万幸是在这之前我已经把它们部署到 Github 上了，内容都在，只是得重新搞一下格式。")]),v._v(" "),t("h3",{attrs:{id:"经验总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#经验总结"}},[v._v("#")]),v._v(" 经验总结")]),v._v(" "),t("ul",[t("li",[v._v("时刻备份重要文件，尤其是在风险操作之前。")]),v._v(" "),t("li",[v._v("同 "),t("code",[v._v("rm")]),v._v(" 命令类似，"),t("code",[v._v("mv")]),v._v(" 命令也是一个具有破坏性的命令，如果使用不当，很可能给系统带来灾难性的后果。")])]),v._v(" "),t("h2",{attrs:{id:"由-lastupdated-无效发现的-docker-容器内-git-仓库跨文件系统问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#由-lastupdated-无效发现的-docker-容器内-git-仓库跨文件系统问题"}},[v._v("#")]),v._v(" 由 "),t("code",[v._v("lastUpdated")]),v._v(" 无效发现的 Docker 容器内 Git 仓库跨文件系统问题")]),v._v(" "),t("h3",{attrs:{id:"问题描述-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#问题描述-2"}},[v._v("#")]),v._v(" 问题描述")]),v._v(" "),t("p",[v._v("在进行默认主题配置的 "),t("a",{attrs:{href:"https://vuepress.vuejs.org/zh/theme/default-theme-config.html#%E6%9C%80%E5%90%8E%E6%9B%B4%E6%96%B0%E6%97%B6%E9%97%B4",target:"_blank",rel:"noopener noreferrer"}},[v._v("最后更新时间"),t("OutboundLink")],1),v._v(" 相关配置时，配置完成后发现没有效果，于是开始排查问题。在 "),t("a",{attrs:{href:"https://vuepress.vuejs.org/zh/theme/default-theme-config.html#%E6%9C%80%E5%90%8E%E6%9B%B4%E6%96%B0%E6%97%B6%E9%97%B4",target:"_blank",rel:"noopener noreferrer"}},[v._v("官方文档中"),t("OutboundLink")],1),v._v(" 有如下提示：")]),v._v(" "),t("blockquote",[t("p",[v._v("使用须知")]),v._v(" "),t("p",[v._v("由于 "),t("code",[v._v("lastUpdated")]),v._v(" 是基于 "),t("code",[v._v("git")]),v._v(" 的, 所以你只能在一个基于 "),t("code",[v._v("git")]),v._v(" 的项目中启用它。此外，由于使用的时间戳来自 git commit，因此它将仅在给定页的第一次提交之后显示，并且仅在该页面后续提交更改时更新。")])]),v._v(" "),t("p",[v._v("它提示了这个功能依赖于 Git 项目的时间戳，但是没有特别明确的说明这个 Git 仓库根目录应该在哪里。按照我个人理解，只要相关文档被 Git 跟踪到并 commit 过，就能够获取到对应的时间戳了。所以我将整个 "),t("code",[v._v("/vuepress")]),v._v(" 作为 Git 仓库的根目录，并 commit 了所有的更改。但页面中并没有显示最后更新时间。")]),v._v(" "),t("blockquote",[t("p",[v._v("这里在根目录建立仓库也是为了方便后续的集成部署。")])]),v._v(" "),t("h3",{attrs:{id:"问题定位-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#问题定位-2"}},[v._v("#")]),v._v(" 问题定位")]),v._v(" "),t("p",[v._v("既然最后更新没有显示出来，在其他配置都没问题的情况下（实际上就其他配置也就是在 "),t("code",[v._v("config.js")]),v._v(" 里面加了个字段），就证明文档的 Git 时间戳没有被正确的获取到。")]),v._v(" "),t("p",[v._v("我首先进到容器里面，在 "),t("code",[v._v("/vuepress")]),v._v(" 目录下执行 "),t("code",[v._v("git log")]),v._v(" 命令，发现日志是正常的，时间戳也都在，并且用 "),t("code",[v._v("git log docs")]),v._v(" 和 "),t("code",[v._v("git log docs/README.md")]),v._v(" 打印对应文档的 log 也都一切正常。")]),v._v(" "),t("p",[t("strong",[v._v("哎？这就奇了怪了，这该有的都有啊，怎么显示不出来呢？难道是因为仓库的路径问题？")])]),v._v(" "),t("p",[v._v("顺着这个思路我重新设置 Git 仓库，将仓库建在了 "),t("code",[v._v("/docs")]),v._v(" 文件夹下，并提交。")]),v._v(" "),t("p",[t("strong",[v._v("哎？这怎么又可以了？！这不应该啊，为什么一定要在 "),t("code",[v._v("vuepress/docs")]),v._v(" 目录才行啊？")])]),v._v(" "),t("p",[v._v("按理来说在 "),t("code",[v._v("/vuepress")]),v._v(" 目录下建仓库 Git 是肯定会跟踪到 "),t("code",[v._v("vuepress/docs")]),v._v(" 目录的啊，在之前也测试过 log 的输出都一切正常啊。")]),v._v(" "),t("p",[v._v("于是我又在 "),t("code",[v._v("/vuepress")]),v._v(" 目录下新建仓库进行测试，这次我先进入到 "),t("code",[v._v("vuepress/docs")]),v._v(" 目录下，再执行 "),t("code",[v._v("git log")]),v._v(" 命令。")]),v._v(" "),t("p",[t("strong",[v._v("哎！问题出现了！")])]),v._v(" "),t("p",[v._v("终端给出了报错：")]),v._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[v._v("root@xxx:/vuepress/docs"),t("span",{pre:!0,attrs:{class:"token comment"}},[v._v("# git log")]),v._v("\nfatal: not a "),t("span",{pre:!0,attrs:{class:"token function"}},[v._v("git")]),v._v(" repository "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("or any parent up to "),t("span",{pre:!0,attrs:{class:"token function"}},[v._v("mount")]),v._v(" point /vuepress"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v("\nStopping at filesystem boundary "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("GIT_DISCOVERY_ACROSS_FILESYSTEM not "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[v._v("set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(".\n")])])]),t("p",[v._v("它告诉我们说这里没有 Git 仓库。这就有点不合理了，明明 commit 的时候都跟踪到了相关文件的。")]),v._v(" "),t("p",[t("strong",[v._v("用第一行报错信息去搜索")]),v._v("，都是告诉要初始化仓库的，这显然不是这个问题的场景。")]),v._v(" "),t("p",[t("strong",[v._v("用第二行报错信息去搜索")]),v._v("，找到了关于此报错的 "),t("a",{attrs:{href:"https://stackoverflow.com/a/62461735",target:"_blank",rel:"noopener noreferrer"}},[v._v("相关解释"),t("OutboundLink")],1),v._v("，大致意思是说 Git 需要访问另一个文件系统，默认权限下它被阻挡在了文件系统边界，无法访问，如果确实需要跨文件系统，需要设置 "),t("code",[v._v("GIT_DISCOVERY_ACROSS_FILESYSTEM")]),v._v(" 环境变量为 1。")]),v._v(" "),t("p",[v._v("**因为我们在启动容器时对 "),t("code",[v._v("vuepress/docs")]),v._v(" 目录做了绑定挂载，把它挂载到了宿主机的对应目录中，**所以出现了跨文件系统的需求，导致了报错信息的出现。")]),v._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[v._v("详细过程")]),v._v(" "),t("p",[v._v("在 "),t("code",[v._v("vuepress/")]),v._v(" 创建的仓库，其 "),t("code",[v._v(".git")]),v._v(" 文件夹是在 "),t("code",[v._v("vuepress")]),v._v(" 目录下，里面存储着仓库所有相关信息，包括变更历史、当前分支以及 Git 跟踪的所有其他信息。在执行 Git 命令的时候，Git 第一件事就是找 "),t("code",[v._v(".git")]),v._v(" 文件夹，它会从当前目录开始向上层递归查找，当前目录没有就去父目录，父目录没有就去父目录的父目录，以此类推，直到不能再访问了为止。如果没有找到，证明这不是一个合法的仓库，就会报错（如上文提到的一样）。")]),v._v(" "),t("p",[v._v("所以，在  "),t("code",[v._v("/vuepress")]),v._v(" 目录下执行  "),t("code",[v._v("git logs docs")]),v._v(" 输出正常证明了 "),t("code",[v._v("/vuepress/.git")]),v._v(" 文件跟踪了 "),t("code",[v._v("/vuepress/docs")]),v._v(" 文件的相关变化。")]),v._v(" "),t("p",[v._v("在 "),t("code",[v._v("vuepress/test")]),v._v(" 目录下执行 Git 命令，Git 在本目录没有找到  "),t("code",[v._v(".git")]),v._v(" 文件夹，然后去父目录也就是 "),t("code",[v._v("vuepress/")]),v._v(" 目录找，成功找到后命令就可以被正确执行。")]),v._v(" "),t("p",[v._v("但是，在进入到 "),t("code",[v._v("/vuepress/docs")]),v._v(" 目录后，"),t("strong",[v._v("因为我们将该目录挂载到了宿主机目录，所以此时操作的文件系统是宿主机的文件系统。")])])]),v._v(" "),t("h3",{attrs:{id:"解决方案-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决方案-2"}},[v._v("#")]),v._v(" 解决方案")]),v._v(" "),t("p",[v._v("因为需要添加全局环境变量，所以得重新运行容器，在启动参数里面加上环境变量。")]),v._v(" "),t("p",[v._v("先 "),t("code",[v._v("docker commit")]),v._v(" 将当前容器提交为一个镜像，保存我们在容器内做的改动，比如 Git 相关的设置。")]),v._v(" "),t("p",[v._v("再 "),t("code",[v._v("docker run")]),v._v(" 基于刚才的镜像实例化一个容器，在参数中添加环境变量，具体如下：")]),v._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[v._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[v._v("docker")]),v._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[v._v("-itd")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("\\")]),v._v("\n\t"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[v._v("-p")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("8080")]),v._v(":8080 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("\\")]),v._v("\n    "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[v._v("--name")]),v._v(" add_env "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("\\")]),v._v("\n    "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[v._v("-e")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[v._v("GIT_DISCOVERY_ACROSS_FILESYSTEM")]),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("1")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("\\")]),v._v("\n    "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[v._v("--mount")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[v._v("type")]),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v("bind,src"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v("/Users/kendrick_song/Documents/📒,target"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v("/vuepress/docs "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("\\")]),v._v("\n    kendrick-song/vuepress-base:2.1\n")])])]),t("p",[v._v("执行 "),t("code",[v._v("docker exec")]),v._v(" 命令进入容器 bash，进入目录 "),t("code",[v._v("/vuepress/docs")]),v._v(" 并再次尝试 "),t("code",[v._v("git log")]),v._v("，已经可以正常显示，没有报错。")]),v._v(" "),t("p",[v._v("在浏览器中查看，文档底部也已经显示出了最后更新时间。")]),v._v(" "),t("h2",{attrs:{id:"lastupdated-时区修改"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lastupdated-时区修改"}},[v._v("#")]),v._v(" lastUpdated 时区修改")]),v._v(" "),t("h3",{attrs:{id:"问题描述-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#问题描述-3"}},[v._v("#")]),v._v(" 问题描述")]),v._v(" "),t("p",[v._v("页面底部显示的最后更新时间时区不是中国时区。")]),v._v(" "),t("h3",{attrs:{id:"问题定位-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#问题定位-3"}},[v._v("#")]),v._v(" 问题定位")]),v._v(" "),t("p",[v._v("lastUpdated 是基于 Git 时间戳来设定文档最后更新时间的，我们先进入容器 bash 并执行 "),t("code",[v._v("git log")]),v._v(" 命令，发现显示的 Date 确实不是中国时区的时间。")]),v._v(" "),t("h3",{attrs:{id:"解决方案-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决方案-3"}},[v._v("#")]),v._v(" 解决方案")]),v._v(" "),t("p",[v._v("修改 Git 日志的时区为特定时区可以参考 "),t("a",{attrs:{href:"https://stackoverflow.com/a/15103333",target:"_blank",rel:"noopener noreferrer"}},[v._v("此回答"),t("OutboundLink")],1),v._v("，大体需要以下几个步骤：")]),v._v(" "),t("ol",[t("li",[v._v("定义环境变量 "),t("code",[v._v("TZ='Asia/Shanghai'")]),v._v("，这一步需要在容器启动时进行配置，后续在 bash 中配置的是临时变量，并不会在 VuePress 运行环境中生效；")]),v._v(" "),t("li",[v._v("配置时区永久生效 "),t("code",[v._v("git config --global log.date local")]),v._v("。")]),v._v(" "),t("li",[v._v("重启容器，lastUpdated 不具备热部署的能力。")])])])}),[],!1,null,null,null);t.default=e.exports}}]);