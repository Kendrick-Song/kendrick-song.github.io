(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{317:function(s,a,t){"use strict";t.r(a);var n=t(14),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"反射"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反射"}},[s._v("#")]),s._v(" 反射")]),s._v(" "),a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[s._v("#")]),s._v(" 概述")]),s._v(" "),a("p",[s._v("Java 的反射是指程序在运行期可以拿到一个对象的所有信息。")]),s._v(" "),a("p",[s._v("反射可以在程序运行时发现并使用对象的类型信息。")]),s._v(" "),a("p",[s._v("通常有两种形式：")]),s._v(" "),a("ul",[a("li",[s._v("简单反射，它假定你在编译时就已经知道了所有可用的类型；")]),s._v(" "),a("li",[s._v("更复杂的反射，它允许我们在运行时发现和使用类的信息。")])]),s._v(" "),a("p",[s._v("反射是为了解决在运行期，对某个实例一无所知的情况下，如何调用其方法。")]),s._v(" "),a("h2",{attrs:{id:"class-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-对象"}},[s._v("#")]),s._v(" Class 对象")]),s._v(" "),a("p",[s._v("JVM 为每个加载的类创建了对应的"),a("strong",[s._v("唯一的")]),s._v(" "),a("code",[s._v("Class")]),s._v(" 实例，并在实例中保存了该类的所有信息，包括类名、包名、父类、实现的接口、所有方法、字段等，因此，如果获取了某个 "),a("code",[s._v("Class")]),s._v(" 实例，我们就可以通过这个 "),a("code",[s._v("Class")]),s._v(" 实例获取到该实例对应的类的所有信息。")]),s._v(" "),a("p",[s._v("这种通过 "),a("code",[s._v("Class")]),s._v(" 实例获取类信息的方法称为反射（Reflection）。")]),s._v(" "),a("h3",{attrs:{id:"class-实例获取方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-实例获取方法"}},[s._v("#")]),s._v(" Class 实例获取方法")]),s._v(" "),a("ol",[a("li",[s._v("直接通过一个类的静态变量 "),a("code",[s._v("class")]),s._v(" 获取：")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),s._v(" cls "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[s._v("如果我们有一个实例变量，可以通过该实例变量提供的 "),a("code",[s._v("getClass()")]),s._v(" 方法获取：")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),s._v(" cls "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[s._v("如果知道一个类的完全限定名，可以通过静态方法 "),a("code",[s._v("Class.forName()")]),s._v(" 获取：")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),s._v(" cls "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("forName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"java.lang.String"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("因为 "),a("code",[s._v("Class")]),s._v(" 实例在 JVM 中是唯一的，所以，上述方法获取的 "),a("code",[s._v("Class")]),s._v(" 实例是同一个实例。")]),s._v(" "),a("p",[s._v("要从 "),a("code",[s._v("Class")]),s._v(" 实例获取获取的基本信息，调用相关的 "),a("code",[s._v("get")]),s._v(" 方法即可。")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("📢 注意")]),s._v(" "),a("p",[s._v("数组（例如 "),a("code",[s._v("String[]")]),s._v("）也是一种类，而且不同于 "),a("code",[s._v("String.class")]),s._v("，它的类名是 "),a("code",[s._v("[Ljava.lang.String;")]),s._v("。此外，JVM 为每一种基本类型如 "),a("code",[s._v("int")]),s._v(" 也创建了 "),a("code",[s._v("Class")]),s._v(" 实例，通过"),a("code",[s._v("int.class")]),s._v("访问。")])]),s._v(" "),a("p",[s._v("如果获取到了一个 "),a("code",[s._v("Class")]),s._v(" 实例，我们就可以通过该 "),a("code",[s._v("Class")]),s._v(" 实例来创建对应类型的实例：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 获取String的Class实例:\nClass cls = String.class;\n// 创建一个String实例:\nString s = (String) cls.newInstance();\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("上述代码相当于 "),a("code",[s._v("new String()")]),s._v("。通过 "),a("code",[s._v("Class.newInstance()")]),s._v(" 可以创建类实例。")]),s._v(" "),a("p",[s._v("它的局限是：只能调用 "),a("code",[s._v("public")]),s._v(" 的无参数构造方法。带参数的构造方法，或者非 "),a("code",[s._v("public")]),s._v(" 的构造方法都无法通过 "),a("code",[s._v("Class.newInstance()")]),s._v(" 被调用。")]),s._v(" "),a("h3",{attrs:{id:"动态加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态加载"}},[s._v("#")]),s._v(" 动态加载")]),s._v(" "),a("p",[s._v("Java 程序在运行前并不会被完全加载，而是在必要时加载对应的部分。类在首次使用时才会被动态加载到 JVM 中。当程序第一次引用该类的静态成员时，就会触发这个类的加载。")]),s._v(" "),a("blockquote",[a("p",[s._v("尽管没有明确使用 static 关键字，但构造器是类的一个静态方法。因此，使用 new 操作符创建类的新对象也算作对该类静态成员的引用，构造器的初次使用会导致该类的加载。")])]),s._v(" "),a("p",[s._v("动态加载类的特性对于 Java 程序非常重要。利用 JVM 动态加载特性，我们才能在运行期根据条件加载不同的实现类。")]),s._v(" "),a("p",[s._v("例如，"),a("code",[s._v("Commons Logging")]),s._v(" 总是优先使用 Log4j，只有当 Log4j 不存在时，才使用 JDK 的 "),a("code",[s._v("logging")]),s._v("。利用 JVM 动态加载特性，大致的实现代码如下：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Commons Logging优先使用Log4j:")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LogFactory")]),s._v(" factory "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("isClassPresent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"org.apache.logging.log4j.Logger"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    factory "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("createLog4j")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    factory "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("createJdkLog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("isClassPresent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("forName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("p",[s._v("这就是为什么我们只需要把 Log4j 的 jar 包放到 classpath 中，"),a("code",[s._v("Commons Logging")]),s._v(" 就会自动使用Log4j 的原因。")])])}),[],!1,null,null,null);a.default=e.exports}}]);